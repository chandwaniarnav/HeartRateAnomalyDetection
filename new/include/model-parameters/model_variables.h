/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */

#ifndef _EI_CLASSIFIER_MODEL_VARIABLES_H_
#define _EI_CLASSIFIER_MODEL_VARIABLES_H_

/**
 * @file
 *  Auto-generated complete impulse definitions. The ei_impulse_handle_t should
 *  be passed to ei_run_classifier() function to use this specific impulse.
 *  This file should only be included in ei_run_classifier.h file.
 */

#include <stdint.h>
#include "model_metadata.h"

#include "tflite-model/tflite_learn_2.h"
#include "edge-impulse-sdk/classifier/ei_model_types.h"
#include "edge-impulse-sdk/classifier/inferencing_engines/engines.h"

const char* ei_classifier_inferencing_categories[] = { "0", "1", "2", "3", "4" };

EI_CLASSIFIER_DSP_AXES_INDEX_TYPE ei_dsp_config_3_axes[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186 };
const uint32_t ei_dsp_config_3_axes_size = 187;
ei_dsp_config_raw_t ei_dsp_config_3 = {
    3, // uint32_t blockId
    1, // int implementationVersion
    187, // int length of axes
    1.0f // float scale-axes
};

const uint8_t ei_dsp_blocks_size = 1;
ei_model_dsp_t ei_dsp_blocks[ei_dsp_blocks_size] = {
    { // DSP block 3
        3,
        187, // output size
        &extract_raw_features, // DSP function pointer
        (void*)&ei_dsp_config_3, // pointer to config struct
        ei_dsp_config_3_axes, // array of offsets into the input stream, one for each axis
        ei_dsp_config_3_axes_size, // number of axes
        1, // version
        nullptr, // factory function
    }
};
const ei_config_tflite_graph_t ei_config_tflite_graph_2 = {
    .implementation_version = 1,
    .model = tflite_learn_2,
    .model_size = tflite_learn_2_len,
    .arena_size = tflite_learn_2_arena_size
};

const ei_learning_block_config_tflite_graph_t ei_learning_block_config_2 = {
    .implementation_version = 1,
    .classification_mode = EI_CLASSIFIER_CLASSIFICATION_MODE_CLASSIFICATION,
    .block_id = 2,
    .object_detection = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .output_data_tensor = 0,
    .output_labels_tensor = 1,
    .output_score_tensor = 2,
    .threshold = 0,
    .quantized = 1,
    .compiled = 0,
    .graph_config = (void*)&ei_config_tflite_graph_2
};

const uint8_t ei_learning_blocks_size = 1;
const uint32_t ei_learning_block_2_inputs[1] = { 3 };
const uint8_t ei_learning_block_2_inputs_size = 1;
const ei_learning_block_t ei_learning_blocks[ei_learning_blocks_size] = {
    {
        2,
        false,
        &run_nn_inference,
        (void*)&ei_learning_block_config_2,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
        ei_learning_block_2_inputs,
        ei_learning_block_2_inputs_size,
        5
    },
};


const ei_object_detection_nms_config_t ei_object_detection_nms = {
    0.0f, /* NMS confidence threshold */
    0.2f  /* NMS IOU threshold */
};

const ei_impulse_t impulse_611570_0 = {
    .project_id = 611570,
    .project_owner = "Arnav c",
    .project_name = "hello",
    .impulse_id = 1,
    .impulse_name = "Impulse #1",
    .deploy_version = 4,

    .nn_input_frame_size = 187,
    .raw_sample_count = 1,
    .raw_samples_per_frame = 187,
    .dsp_input_frame_size = 1 * 187,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 1,
    .frequency = 0,
    .dsp_blocks_size = ei_dsp_blocks_size,
    .dsp_blocks = ei_dsp_blocks,
    
    .object_detection_count = 0,
    .fomo_output_size = 0,

    
    .visual_ad_grid_size_x = 0,
    .visual_ad_grid_size_y = 0,
    
    .tflite_output_features_count = 5,
    .learning_blocks_size = ei_learning_blocks_size,
    .learning_blocks = ei_learning_blocks,

    .postprocessing_blocks_size = 0,
    .postprocessing_blocks = nullptr,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .sensor = EI_CLASSIFIER_SENSOR_FUSION,
    .fusion_string = "Unnamed 1 + Unnamed 2 + Unnamed 3 + Unnamed 4 + Unnamed 5 + Unnamed 6 + Unnamed 7 + Unnamed 8 + Unnamed 9 + Unnamed 10 + Unnamed 11 + Unnamed 12 + Unnamed 13 + Unnamed 14 + Unnamed 15 + Unnamed 16 + Unnamed 17 + Unnamed 18 + Unnamed 19 + Unnamed 20 + Unnamed 21 + Unnamed 22 + Unnamed 23 + Unnamed 24 + Unnamed 25 + Unnamed 26 + Unnamed 27 + Unnamed 28 + Unnamed 29 + Unnamed 30 + Unnamed 31 + Unnamed 32 + Unnamed 33 + Unnamed 34 + Unnamed 35 + Unnamed 36 + Unnamed 37 + Unnamed 38 + Unnamed 39 + Unnamed 40 + Unnamed 41 + Unnamed 42 + Unnamed 43 + Unnamed 44 + Unnamed 45 + Unnamed 46 + Unnamed 47 + Unnamed 48 + Unnamed 49 + Unnamed 50 + Unnamed 51 + Unnamed 52 + Unnamed 53 + Unnamed 54 + Unnamed 55 + Unnamed 56 + Unnamed 57 + Unnamed 58 + Unnamed 59 + Unnamed 60 + Unnamed 61 + Unnamed 62 + Unnamed 63 + Unnamed 64 + Unnamed 65 + Unnamed 66 + Unnamed 67 + Unnamed 68 + Unnamed 69 + Unnamed 70 + Unnamed 71 + Unnamed 72 + Unnamed 73 + Unnamed 74 + Unnamed 75 + Unnamed 76 + Unnamed 77 + Unnamed 78 + Unnamed 79 + Unnamed 80 + Unnamed 81 + Unnamed 82 + Unnamed 83 + Unnamed 84 + Unnamed 85 + Unnamed 86 + Unnamed 87 + Unnamed 88 + Unnamed 89 + Unnamed 90 + Unnamed 91 + Unnamed 92 + Unnamed 93 + Unnamed 94 + Unnamed 95 + Unnamed 96 + Unnamed 97 + Unnamed 98 + Unnamed 99 + Unnamed 100 + Unnamed 101 + Unnamed 102 + Unnamed 103 + Unnamed 104 + Unnamed 105 + Unnamed 106 + Unnamed 107 + Unnamed 108 + Unnamed 109 + Unnamed 110 + Unnamed 111 + Unnamed 112 + Unnamed 113 + Unnamed 114 + Unnamed 115 + Unnamed 116 + Unnamed 117 + Unnamed 118 + Unnamed 119 + Unnamed 120 + Unnamed 121 + Unnamed 122 + Unnamed 123 + Unnamed 124 + Unnamed 125 + Unnamed 126 + Unnamed 127 + Unnamed 128 + Unnamed 129 + Unnamed 130 + Unnamed 131 + Unnamed 132 + Unnamed 133 + Unnamed 134 + Unnamed 135 + Unnamed 136 + Unnamed 137 + Unnamed 138 + Unnamed 139 + Unnamed 140 + Unnamed 141 + Unnamed 142 + Unnamed 143 + Unnamed 144 + Unnamed 145 + Unnamed 146 + Unnamed 147 + Unnamed 148 + Unnamed 149 + Unnamed 150 + Unnamed 151 + Unnamed 152 + Unnamed 153 + Unnamed 154 + Unnamed 155 + Unnamed 156 + Unnamed 157 + Unnamed 158 + Unnamed 159 + Unnamed 160 + Unnamed 161 + Unnamed 162 + Unnamed 163 + Unnamed 164 + Unnamed 165 + Unnamed 166 + Unnamed 167 + Unnamed 168 + Unnamed 169 + Unnamed 170 + Unnamed 171 + Unnamed 172 + Unnamed 173 + Unnamed 174 + Unnamed 175 + Unnamed 176 + Unnamed 177 + Unnamed 178 + Unnamed 179 + Unnamed 180 + Unnamed 181 + Unnamed 182 + Unnamed 183 + Unnamed 184 + Unnamed 185 + Unnamed 186 + Unnamed 187",
    .slice_size = (1/4),
    .slices_per_model_window = 4,

    .has_anomaly = EI_ANOMALY_TYPE_UNKNOWN,
    .label_count = 5,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_611570_0 = ei_impulse_handle_t( &impulse_611570_0 );
ei_impulse_handle_t& ei_default_impulse = impulse_handle_611570_0;

#endif // _EI_CLASSIFIER_MODEL_VARIABLES_H_
